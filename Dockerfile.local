# base image  
FROM python:3.10.10-alpine3.17

# Upgrade the Alpine image
RUN echo http://dl-cdn.alpinelinux.org/alpine/v3.17/community >> /etc/apk/repositories \
  && apk update \
  && apk --no-cache upgrade

# Install build dependencies.
RUN apk --no-cache add --virtual .build-deps \
    gcc \
    libffi-dev \
    make \
    musl-dev \
    postgresql-dev

# Install run-time dependencies.
RUN apk --no-cache add \
    bzip2 \
    git \
    libxml2-dev \
    libxslt-dev \
    postgresql-client \
    python3-dev \
    py-setuptools \
    unzip

# Upgrade pip.
RUN pip install --upgrade pip  
RUN pip install setuptools -U

# setup environment variable  
ENV _WORKDIR=/app/las/ 

# set work directory  
RUN mkdir -p $_WORKDIR  

# where your code lives  
WORKDIR $_WORKDIR


# Install the application requirements.
COPY requirements.txt .
RUN pip install -r requirements.txt

# set environment variables  
# ENV PYTHONDONTWRITEBYTECODE 1
# ENV PYTHONUNBUFFERED 1  

# copy whole project to your docker home directory. 
COPY . $_WORKDIR

# Setup initialization files
# RUN mkdir /var/log/django/
COPY docker/init_web.py /init/
RUN chmod +x /init/*
COPY docker/gunicorn.conf.py /tmp/gunicorn.conf.py
# COPY docker/django-logs /etc/logrotate.d

RUN chmod +x $_WORKDIR/LAS/wsgi.py

# port where the Django app runs  
EXPOSE 8000

# start server  
CMD /init/init_web.py && python manage.py runserver 0.0.0.0:8000

# TODO: Improve for deployment 
# CMD /init/init_web.py && gunicorn LAS.wsgi:application -c /tmp/gunicorn.conf.py -p /var/run/gunicorn.pid
